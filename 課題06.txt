//---内積・外積---//

.hファイル
	XMFLOAT2 circlePos;
	XMFLOAT2 linePos;
	const float vec2 = 2.0f;
	bool trigger;

	const XMFLOAT2 center = { 1280.0f / 2.0f ,720.0f / 2.0f };

	const float circleRadius = 16.0f;
	XMFLOAT2 start;
	XMFLOAT2 end;
	float NormalizeVector(XMFLOAT2 vec);

GameScene::GameScene()
　　　　circlePos = { 1280.0f / 2.0f - circleRadius,720.0f / 2.0f - circleRadius };
	linePos = { 800.0f,720.0f / 2.0f - 100.0f };
	start = { 0,0 };
	end = { 0,0 };
	trigger = false;

GameScene::Update()
        //---移動---//
	linePos.x += (input->PushKey(DIK_D) - input->PushKey(DIK_A)) * 3;
	linePos.y += (input->PushKey(DIK_S) - input->PushKey(DIK_W)) * 3;
	//----------//

	start = { linePos.x,linePos.y };
	end = { linePos.x,linePos.y + 200.0f };

	float dis = ((center.x - start.x) * (end.y - start.y) - (end.x - start.x) * (center.y - start.y)) / static_cast<float>(sqrtf(pow(end.x - start.x, 2) + pow(end.y - start.y, 2)));

	if (fabsf(dis) <= 16.0f)
	{
		float dot1 = (center.x - start.x) * (end.x - start.x) + (center.y - start.y) * (end.y - start.y);
		float dot2 = (center.x - end.x) * (end.x - start.x) + (center.y - end.y) * (end.y - start.y);

		if (dot1 * dot2 <= 0.0f)
		{
			trigger = true;
		}
		else if (NormalizeVector(XMFLOAT2(center.x - start.x, center.y - start.y)) < circleRadius || NormalizeVector(XMFLOAT2(center.x - end.x, center.y - end.y)) < circleRadius)
		{
			trigger = true;
		}
		else
		{
			trigger = false;
		}
	}

	else
	{
		trigger = false;
	}